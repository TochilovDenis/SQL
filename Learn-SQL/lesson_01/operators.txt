SELECT 1+1;

Запрос, который выполняет простое сложение и возвращает результат 2

------------------------------------------------

SELECT * FROM employees limit 5
SELECT    - Выбери
 * 	  - все колонки 
FROM	  - из
employees - таблицы с именем employees
limit 5   - выполняется условие ограничения до 5

------------------------------------------------
SELECT name FROM employees
SELECT    - Выбери
name	  - имена
FROM	  - из
employees - таблицы с именем employees

------------------------------------------------

SELECT city     - Выбери город
FROM employees; - из таблицы с именем employees
#Вывод:
city
London
London
London
Berlin
London
Berlin
Berlin
Berlin
London
Berlin

------------------------------------------------

SELECT DISTINCT city - Выбери отдельный город
FROM employees;      - из таблицы с именем employees
#Вывод:
London
Berlin

слово DISTINCT - для удаления дубликатов из результирующего набора оператора SELECT

------------------------------------------------

SELECT *
FROM employees
WHERE city = 'London'; - используется для фильтрации записей в результатах запроса.
Оно ограничивает результат только теми записями, где значение в поле "city" равно 'London'.

------------------------------------------------

SELECT name, milliseconds, albumid -> Запрос выбирает имя, миллисекунд, id альбом
FROM tracks -> из трека
ORDER BY albumid DESC -> отсортирует по полю albumid в обратном порядке
LIMIT 10; -> только первые 10 записей

------------------------------------------------

SELECT name, milliseconds, albumid -> Запрос выбирает имя, миллисекунд, id альбом
FROM tracks -> из трека
ORDER BY albumid ASC -> отсортированы по полю albumid по возрастанию
LIMIT 10; -> только первые 10 записей

------------------------------------------------

Что делает ORDER BY, ASC и DESC?

ORDER BY сортирует результаты запроса в определенном порядке
ASC (Ascending): сортировка по возрастанию (по умолчанию)
DESC (Descending): сортировка по убыванию

------------------------------------------------

SELECT name, milliseconds, bytes, albumid -> Запрос выбирает имя, миллисекунд, id альбом
FROM tracks -> из таблицы трека
WHERE albumid = 1; -> Условие фильтрации, то есть ограничивает выбор только теми треками, которые принадлежат альбому с ID 1.

------------------------------------------------

SELECT COUNT(*) FROM имя_таблицы  -> Выполняется подсчет всех строк в указанной таблице
                FROM имя_таблицы указывает, из какой таблицы нужно считать данные.

------------------------------------------------

COUNT(DISTINCT поле) подсчитывает количество уникальных значений в указанном поле.

SELECT COUNT(DISTINCT поле) FROM имя_таблицы  -> Выполняется подсчет уникальных записей во всей таблице
                FROM имя_таблицы указывает, из какой таблицы нужно считать данные.

SELECT COUNT(DISTINCT *) FROM users; Выполняется Подсчет уникальных записей во всей таблице

SELECT COUNT(DISTINCT email) FROM users; Выполняется Подсчет уникальных значений в столбце "email"

SELECT COUNT(DISTINCT name, age) FROM students; Выполняется Подсчет уникальных комбинаций столбцов "name" и "age"

------------------------------------------------

SELECT name, milliseconds, albumid
FROM tracks
ORDER BY albumid DESC
LIMIT 10;

Структура вывода:
Запрос выбирает три поля из таблицы tracks: имя трека (name), количество миллисекунд (milliseconds)
и идентификатор альбома (albumid).

Сортировка и ограничение:
ORDER BY используется для сортировки результатов запроса в определенном порядке.
Результаты отсортированы по убыванию (DESC) значения albumid, то есть от самого большого к самому маленькому.

Ограничение вывода:
Запрос ограничен (LIMIT 10), что означает, что будут выведены только первые 10 записей после сортировки.

------------------------------------------------

SELECT name, milliseconds, albumid
FROM tracks
WHERE albumid = 2 AND milliseconds > 250000;

SELECT: выбирает столбцы для вывода

name: название трека
milliseconds: длительность трека в миллисекундах
albumid: идентификатор альбома

FROM tracks: указывает таблицу, из которой берутся данные (tracks)

WHERE: -> используется для фильтрации записей в результатах запроса.

albumid = 2: фильтрует только треки с альбомом с id 2
milliseconds > 250000: дополнительно фильтрует треки длиннее 250 секунд (или 4 минут)

------------------------------------------------

